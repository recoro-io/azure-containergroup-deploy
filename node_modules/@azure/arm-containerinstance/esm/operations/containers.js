/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/containersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Containers. */
var Containers = /** @class */ (function () {
    /**
     * Create a Containers.
     * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
     */
    function Containers(client) {
        this.client = client;
    }
    Containers.prototype.listLogs = function (resourceGroupName, containerGroupName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            containerGroupName: containerGroupName,
            containerName: containerName,
            options: options
        }, listLogsOperationSpec, callback);
    };
    Containers.prototype.executeCommand = function (resourceGroupName, containerGroupName, containerName, containerExecRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            containerGroupName: containerGroupName,
            containerName: containerName,
            containerExecRequest: containerExecRequest,
            options: options
        }, executeCommandOperationSpec, callback);
    };
    Containers.prototype.attach = function (resourceGroupName, containerGroupName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            containerGroupName: containerGroupName,
            containerName: containerName,
            options: options
        }, attachOperationSpec, callback);
    };
    return Containers;
}());
export { Containers };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listLogsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/logs",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName,
        Parameters.containerName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.tail,
        Parameters.timestamps
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Logs
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var executeCommandOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/exec",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName,
        Parameters.containerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "containerExecRequest",
        mapper: __assign(__assign({}, Mappers.ContainerExecRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ContainerExecResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var attachOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/attach",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.containerGroupName,
        Parameters.containerName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContainerAttachResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=containers.js.map