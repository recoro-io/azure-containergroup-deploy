/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmContainerinstance = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ContainerPort = {
        serializedName: "ContainerPort",
        type: {
            name: "Composite",
            className: "ContainerPort",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EnvironmentVariable = {
        serializedName: "EnvironmentVariable",
        type: {
            name: "Composite",
            className: "EnvironmentVariable",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                secureValue: {
                    serializedName: "secureValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerState = {
        serializedName: "ContainerState",
        type: {
            name: "Composite",
            className: "ContainerState",
            modelProperties: {
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    readOnly: true,
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                finishTime: {
                    readOnly: true,
                    serializedName: "finishTime",
                    type: {
                        name: "DateTime"
                    }
                },
                detailStatus: {
                    readOnly: true,
                    serializedName: "detailStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Event = {
        serializedName: "Event",
        type: {
            name: "Composite",
            className: "Event",
            modelProperties: {
                count: {
                    readOnly: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                firstTimestamp: {
                    readOnly: true,
                    serializedName: "firstTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                lastTimestamp: {
                    readOnly: true,
                    serializedName: "lastTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerPropertiesInstanceView = {
        serializedName: "ContainerProperties_instanceView",
        type: {
            name: "Composite",
            className: "ContainerPropertiesInstanceView",
            modelProperties: {
                restartCount: {
                    readOnly: true,
                    serializedName: "restartCount",
                    type: {
                        name: "Number"
                    }
                },
                currentState: {
                    readOnly: true,
                    serializedName: "currentState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                previousState: {
                    readOnly: true,
                    serializedName: "previousState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                events: {
                    readOnly: true,
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                }
            }
        }
    };
    var GpuResource = {
        serializedName: "GpuResource",
        type: {
            name: "Composite",
            className: "GpuResource",
            modelProperties: {
                count: {
                    required: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceRequests = {
        serializedName: "ResourceRequests",
        type: {
            name: "Composite",
            className: "ResourceRequests",
            modelProperties: {
                memoryInGB: {
                    required: true,
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    required: true,
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                },
                gpu: {
                    serializedName: "gpu",
                    type: {
                        name: "Composite",
                        className: "GpuResource"
                    }
                }
            }
        }
    };
    var ResourceLimits = {
        serializedName: "ResourceLimits",
        type: {
            name: "Composite",
            className: "ResourceLimits",
            modelProperties: {
                memoryInGB: {
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                },
                gpu: {
                    serializedName: "gpu",
                    type: {
                        name: "Composite",
                        className: "GpuResource"
                    }
                }
            }
        }
    };
    var ResourceRequirements = {
        serializedName: "ResourceRequirements",
        type: {
            name: "Composite",
            className: "ResourceRequirements",
            modelProperties: {
                requests: {
                    required: true,
                    serializedName: "requests",
                    type: {
                        name: "Composite",
                        className: "ResourceRequests"
                    }
                },
                limits: {
                    serializedName: "limits",
                    type: {
                        name: "Composite",
                        className: "ResourceLimits"
                    }
                }
            }
        }
    };
    var VolumeMount = {
        serializedName: "VolumeMount",
        type: {
            name: "Composite",
            className: "VolumeMount",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                mountPath: {
                    required: true,
                    serializedName: "mountPath",
                    type: {
                        name: "String"
                    }
                },
                readOnly: {
                    serializedName: "readOnly",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ContainerExec = {
        serializedName: "ContainerExec",
        type: {
            name: "Composite",
            className: "ContainerExec",
            modelProperties: {
                command: {
                    serializedName: "command",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var HttpHeader = {
        serializedName: "HttpHeader",
        type: {
            name: "Composite",
            className: "HttpHeader",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerHttpGet = {
        serializedName: "ContainerHttpGet",
        type: {
            name: "Composite",
            className: "ContainerHttpGet",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                scheme: {
                    serializedName: "scheme",
                    type: {
                        name: "String"
                    }
                },
                httpHeaders: {
                    serializedName: "httpHeaders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HttpHeader"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerProbe = {
        serializedName: "ContainerProbe",
        type: {
            name: "Composite",
            className: "ContainerProbe",
            modelProperties: {
                exec: {
                    serializedName: "exec",
                    type: {
                        name: "Composite",
                        className: "ContainerExec"
                    }
                },
                httpGet: {
                    serializedName: "httpGet",
                    type: {
                        name: "Composite",
                        className: "ContainerHttpGet"
                    }
                },
                initialDelaySeconds: {
                    serializedName: "initialDelaySeconds",
                    type: {
                        name: "Number"
                    }
                },
                periodSeconds: {
                    serializedName: "periodSeconds",
                    type: {
                        name: "Number"
                    }
                },
                failureThreshold: {
                    serializedName: "failureThreshold",
                    type: {
                        name: "Number"
                    }
                },
                successThreshold: {
                    serializedName: "successThreshold",
                    type: {
                        name: "Number"
                    }
                },
                timeoutSeconds: {
                    serializedName: "timeoutSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Container = {
        serializedName: "Container",
        type: {
            name: "Composite",
            className: "Container",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    required: true,
                    serializedName: "properties.image",
                    type: {
                        name: "String"
                    }
                },
                command: {
                    serializedName: "properties.command",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                ports: {
                    serializedName: "properties.ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerPort"
                            }
                        }
                    }
                },
                environmentVariables: {
                    serializedName: "properties.environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                },
                instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "ContainerPropertiesInstanceView"
                    }
                },
                resources: {
                    required: true,
                    serializedName: "properties.resources",
                    type: {
                        name: "Composite",
                        className: "ResourceRequirements"
                    }
                },
                volumeMounts: {
                    serializedName: "properties.volumeMounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeMount"
                            }
                        }
                    }
                },
                livenessProbe: {
                    serializedName: "properties.livenessProbe",
                    type: {
                        name: "Composite",
                        className: "ContainerProbe"
                    }
                },
                readinessProbe: {
                    serializedName: "properties.readinessProbe",
                    type: {
                        name: "Composite",
                        className: "ContainerProbe"
                    }
                }
            }
        }
    };
    var AzureFileVolume = {
        serializedName: "AzureFileVolume",
        type: {
            name: "Composite",
            className: "AzureFileVolume",
            modelProperties: {
                shareName: {
                    required: true,
                    serializedName: "shareName",
                    type: {
                        name: "String"
                    }
                },
                readOnly: {
                    serializedName: "readOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                storageAccountName: {
                    required: true,
                    serializedName: "storageAccountName",
                    type: {
                        name: "String"
                    }
                },
                storageAccountKey: {
                    serializedName: "storageAccountKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GitRepoVolume = {
        serializedName: "GitRepoVolume",
        type: {
            name: "Composite",
            className: "GitRepoVolume",
            modelProperties: {
                directory: {
                    serializedName: "directory",
                    type: {
                        name: "String"
                    }
                },
                repository: {
                    required: true,
                    serializedName: "repository",
                    type: {
                        name: "String"
                    }
                },
                revision: {
                    serializedName: "revision",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Volume = {
        serializedName: "Volume",
        type: {
            name: "Composite",
            className: "Volume",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                azureFile: {
                    serializedName: "azureFile",
                    type: {
                        name: "Composite",
                        className: "AzureFileVolume"
                    }
                },
                emptyDir: {
                    serializedName: "emptyDir",
                    type: {
                        name: "Object"
                    }
                },
                secret: {
                    serializedName: "secret",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                gitRepo: {
                    serializedName: "gitRepo",
                    type: {
                        name: "Composite",
                        className: "GitRepoVolume"
                    }
                }
            }
        }
    };
    var ContainerGroupIdentityUserAssignedIdentitiesValue = {
        serializedName: "ContainerGroupIdentity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "ContainerGroupIdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerGroupIdentity = {
        serializedName: "ContainerGroupIdentity",
        type: {
            name: "Composite",
            className: "ContainerGroupIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ContainerGroupIdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageRegistryCredential = {
        serializedName: "ImageRegistryCredential",
        type: {
            name: "Composite",
            className: "ImageRegistryCredential",
            modelProperties: {
                server: {
                    required: true,
                    serializedName: "server",
                    type: {
                        name: "String"
                    }
                },
                username: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "String"
                    }
                },
                identityUrl: {
                    serializedName: "identityUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Port = {
        serializedName: "Port",
        type: {
            name: "Composite",
            className: "Port",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IpAddress = {
        serializedName: "IpAddress",
        type: {
            name: "Composite",
            className: "IpAddress",
            modelProperties: {
                ports: {
                    required: true,
                    serializedName: "ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Port"
                            }
                        }
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                ip: {
                    serializedName: "ip",
                    type: {
                        name: "String"
                    }
                },
                dnsNameLabel: {
                    serializedName: "dnsNameLabel",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerGroupPropertiesInstanceView = {
        serializedName: "ContainerGroup_properties_instanceView",
        type: {
            name: "Composite",
            className: "ContainerGroupPropertiesInstanceView",
            modelProperties: {
                events: {
                    readOnly: true,
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogAnalytics = {
        serializedName: "LogAnalytics",
        type: {
            name: "Composite",
            className: "LogAnalytics",
            modelProperties: {
                workspaceId: {
                    required: true,
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                workspaceKey: {
                    required: true,
                    serializedName: "workspaceKey",
                    type: {
                        name: "String"
                    }
                },
                logType: {
                    serializedName: "logType",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                workspaceResourceId: {
                    serializedName: "workspaceResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerGroupDiagnostics = {
        serializedName: "ContainerGroupDiagnostics",
        type: {
            name: "Composite",
            className: "ContainerGroupDiagnostics",
            modelProperties: {
                logAnalytics: {
                    serializedName: "logAnalytics",
                    type: {
                        name: "Composite",
                        className: "LogAnalytics"
                    }
                }
            }
        }
    };
    var ContainerGroupSubnetId = {
        serializedName: "ContainerGroupSubnetId",
        type: {
            name: "Composite",
            className: "ContainerGroupSubnetId",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DnsConfiguration = {
        serializedName: "DnsConfiguration",
        type: {
            name: "Composite",
            className: "DnsConfiguration",
            modelProperties: {
                nameServers: {
                    required: true,
                    serializedName: "nameServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                searchDomains: {
                    serializedName: "searchDomains",
                    type: {
                        name: "String"
                    }
                },
                options: {
                    serializedName: "options",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EncryptionProperties = {
        serializedName: "EncryptionProperties",
        type: {
            name: "Composite",
            className: "EncryptionProperties",
            modelProperties: {
                vaultBaseUrl: {
                    required: true,
                    serializedName: "vaultBaseUrl",
                    type: {
                        name: "String"
                    }
                },
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                },
                keyVersion: {
                    required: true,
                    serializedName: "keyVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InitContainerPropertiesDefinitionInstanceView = {
        serializedName: "InitContainerPropertiesDefinition_instanceView",
        type: {
            name: "Composite",
            className: "InitContainerPropertiesDefinitionInstanceView",
            modelProperties: {
                restartCount: {
                    readOnly: true,
                    serializedName: "restartCount",
                    type: {
                        name: "Number"
                    }
                },
                currentState: {
                    readOnly: true,
                    serializedName: "currentState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                previousState: {
                    readOnly: true,
                    serializedName: "previousState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                events: {
                    readOnly: true,
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                }
            }
        }
    };
    var InitContainerDefinition = {
        serializedName: "InitContainerDefinition",
        type: {
            name: "Composite",
            className: "InitContainerDefinition",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    serializedName: "properties.image",
                    type: {
                        name: "String"
                    }
                },
                command: {
                    serializedName: "properties.command",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                environmentVariables: {
                    serializedName: "properties.environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                },
                instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "InitContainerPropertiesDefinitionInstanceView"
                    }
                },
                volumeMounts: {
                    serializedName: "properties.volumeMounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeMount"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerGroup = {
        serializedName: "ContainerGroup",
        type: {
            name: "Composite",
            className: "ContainerGroup",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ContainerGroupIdentity"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, containers: {
                    required: true,
                    serializedName: "properties.containers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Container"
                            }
                        }
                    }
                }, imageRegistryCredentials: {
                    serializedName: "properties.imageRegistryCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegistryCredential"
                            }
                        }
                    }
                }, restartPolicy: {
                    serializedName: "properties.restartPolicy",
                    type: {
                        name: "String"
                    }
                }, ipAddress: {
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "Composite",
                        className: "IpAddress"
                    }
                }, osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                }, volumes: {
                    serializedName: "properties.volumes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Volume"
                            }
                        }
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "ContainerGroupPropertiesInstanceView"
                    }
                }, diagnostics: {
                    serializedName: "properties.diagnostics",
                    type: {
                        name: "Composite",
                        className: "ContainerGroupDiagnostics"
                    }
                }, subnetIds: {
                    serializedName: "properties.subnetIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerGroupSubnetId"
                            }
                        }
                    }
                }, dnsConfig: {
                    serializedName: "properties.dnsConfig",
                    type: {
                        name: "Composite",
                        className: "DnsConfiguration"
                    }
                }, sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "String"
                    }
                }, encryptionProperties: {
                    serializedName: "properties.encryptionProperties",
                    type: {
                        name: "Composite",
                        className: "EncryptionProperties"
                    }
                }, initContainers: {
                    serializedName: "properties.initContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InitContainerDefinition"
                            }
                        }
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    required: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageName = {
        serializedName: "Usage_name",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var Logs = {
        serializedName: "Logs",
        type: {
            name: "Composite",
            className: "Logs",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerExecRequestTerminalSize = {
        serializedName: "ContainerExecRequest_terminalSize",
        type: {
            name: "Composite",
            className: "ContainerExecRequestTerminalSize",
            modelProperties: {
                rows: {
                    serializedName: "rows",
                    type: {
                        name: "Number"
                    }
                },
                cols: {
                    serializedName: "cols",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerExecRequest = {
        serializedName: "ContainerExecRequest",
        type: {
            name: "Composite",
            className: "ContainerExecRequest",
            modelProperties: {
                command: {
                    serializedName: "command",
                    type: {
                        name: "String"
                    }
                },
                terminalSize: {
                    serializedName: "terminalSize",
                    type: {
                        name: "Composite",
                        className: "ContainerExecRequestTerminalSize"
                    }
                }
            }
        }
    };
    var ContainerExecResponse = {
        serializedName: "ContainerExecResponse",
        type: {
            name: "Composite",
            className: "ContainerExecResponse",
            modelProperties: {
                webSocketUri: {
                    serializedName: "webSocketUri",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerAttachResponse = {
        serializedName: "ContainerAttachResponse",
        type: {
            name: "Composite",
            className: "ContainerAttachResponse",
            modelProperties: {
                webSocketUri: {
                    serializedName: "webSocketUri",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CachedImages = {
        serializedName: "cachedImages",
        type: {
            name: "Composite",
            className: "CachedImages",
            modelProperties: {
                osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    required: true,
                    serializedName: "image",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CapabilitiesCapabilities = {
        serializedName: "Capabilities_capabilities",
        type: {
            name: "Composite",
            className: "CapabilitiesCapabilities",
            modelProperties: {
                maxMemoryInGB: {
                    readOnly: true,
                    serializedName: "maxMemoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                maxCpu: {
                    readOnly: true,
                    serializedName: "maxCpu",
                    type: {
                        name: "Number"
                    }
                },
                maxGpuCount: {
                    readOnly: true,
                    serializedName: "maxGpuCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Capabilities = {
        serializedName: "Capabilities",
        type: {
            name: "Composite",
            className: "Capabilities",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    readOnly: true,
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                ipAddressType: {
                    readOnly: true,
                    serializedName: "ipAddressType",
                    type: {
                        name: "String"
                    }
                },
                gpu: {
                    readOnly: true,
                    serializedName: "gpu",
                    type: {
                        name: "String"
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Composite",
                        className: "CapabilitiesCapabilities"
                    }
                }
            }
        }
    };
    var ContainerGroupListResult = {
        serializedName: "ContainerGroupListResult",
        type: {
            name: "Composite",
            className: "ContainerGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageListResult = {
        serializedName: "UsageListResult",
        type: {
            name: "Composite",
            className: "UsageListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var CachedImagesListResult = {
        serializedName: "CachedImagesListResult",
        type: {
            name: "Composite",
            className: "CachedImagesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CachedImages"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CapabilitiesListResult = {
        serializedName: "CapabilitiesListResult",
        type: {
            name: "Composite",
            className: "CapabilitiesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Capabilities"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        ContainerPort: ContainerPort,
        EnvironmentVariable: EnvironmentVariable,
        ContainerState: ContainerState,
        Event: Event,
        ContainerPropertiesInstanceView: ContainerPropertiesInstanceView,
        GpuResource: GpuResource,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ResourceRequirements: ResourceRequirements,
        VolumeMount: VolumeMount,
        ContainerExec: ContainerExec,
        HttpHeader: HttpHeader,
        ContainerHttpGet: ContainerHttpGet,
        ContainerProbe: ContainerProbe,
        Container: Container,
        AzureFileVolume: AzureFileVolume,
        GitRepoVolume: GitRepoVolume,
        Volume: Volume,
        ContainerGroupIdentityUserAssignedIdentitiesValue: ContainerGroupIdentityUserAssignedIdentitiesValue,
        ContainerGroupIdentity: ContainerGroupIdentity,
        ImageRegistryCredential: ImageRegistryCredential,
        Port: Port,
        IpAddress: IpAddress,
        ContainerGroupPropertiesInstanceView: ContainerGroupPropertiesInstanceView,
        LogAnalytics: LogAnalytics,
        ContainerGroupDiagnostics: ContainerGroupDiagnostics,
        ContainerGroupSubnetId: ContainerGroupSubnetId,
        DnsConfiguration: DnsConfiguration,
        EncryptionProperties: EncryptionProperties,
        InitContainerPropertiesDefinitionInstanceView: InitContainerPropertiesDefinitionInstanceView,
        InitContainerDefinition: InitContainerDefinition,
        Resource: Resource,
        ContainerGroup: ContainerGroup,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        UsageName: UsageName,
        Usage: Usage,
        Logs: Logs,
        ContainerExecRequestTerminalSize: ContainerExecRequestTerminalSize,
        ContainerExecRequest: ContainerExecRequest,
        ContainerExecResponse: ContainerExecResponse,
        ContainerAttachResponse: ContainerAttachResponse,
        CachedImages: CachedImages,
        CapabilitiesCapabilities: CapabilitiesCapabilities,
        Capabilities: Capabilities,
        ContainerGroupListResult: ContainerGroupListResult,
        OperationListResult: OperationListResult,
        UsageListResult: UsageListResult,
        CachedImagesListResult: CachedImagesListResult,
        CapabilitiesListResult: CapabilitiesListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AzureFileVolume: AzureFileVolume,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Container: Container,
        ContainerExec: ContainerExec,
        ContainerGroup: ContainerGroup,
        ContainerGroupDiagnostics: ContainerGroupDiagnostics,
        ContainerGroupIdentity: ContainerGroupIdentity,
        ContainerGroupIdentityUserAssignedIdentitiesValue: ContainerGroupIdentityUserAssignedIdentitiesValue,
        ContainerGroupListResult: ContainerGroupListResult,
        ContainerGroupPropertiesInstanceView: ContainerGroupPropertiesInstanceView,
        ContainerGroupSubnetId: ContainerGroupSubnetId,
        ContainerHttpGet: ContainerHttpGet,
        ContainerPort: ContainerPort,
        ContainerProbe: ContainerProbe,
        ContainerPropertiesInstanceView: ContainerPropertiesInstanceView,
        ContainerState: ContainerState,
        DnsConfiguration: DnsConfiguration,
        EncryptionProperties: EncryptionProperties,
        EnvironmentVariable: EnvironmentVariable,
        Event: Event,
        GitRepoVolume: GitRepoVolume,
        GpuResource: GpuResource,
        HttpHeader: HttpHeader,
        ImageRegistryCredential: ImageRegistryCredential,
        InitContainerDefinition: InitContainerDefinition,
        InitContainerPropertiesDefinitionInstanceView: InitContainerPropertiesDefinitionInstanceView,
        IpAddress: IpAddress,
        LogAnalytics: LogAnalytics,
        Port: Port,
        Resource: Resource,
        ResourceLimits: ResourceLimits,
        ResourceRequests: ResourceRequests,
        ResourceRequirements: ResourceRequirements,
        Volume: Volume,
        VolumeMount: VolumeMount
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var containerGroupName = {
        parameterPath: "containerGroupName",
        mapper: {
            required: true,
            serializedName: "containerGroupName",
            type: {
                name: "String"
            }
        }
    };
    var containerName = {
        parameterPath: "containerName",
        mapper: {
            required: true,
            serializedName: "containerName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tail = {
        parameterPath: [
            "options",
            "tail"
        ],
        mapper: {
            serializedName: "tail",
            type: {
                name: "Number"
            }
        }
    };
    var timestamps = {
        parameterPath: [
            "options",
            "timestamps"
        ],
        mapper: {
            serializedName: "timestamps",
            type: {
                name: "Boolean"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerGroups. */
    var ContainerGroups = /** @class */ (function () {
        /**
         * Create a ContainerGroups.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function ContainerGroups(client) {
            this.client = client;
        }
        ContainerGroups.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        ContainerGroups.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        ContainerGroups.prototype.get = function (resourceGroupName, containerGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create or update container groups with specified configurations.
         * @summary Create or update container groups.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param containerGroup The properties of the container group to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<Models.ContainerGroupsCreateOrUpdateResponse>
         */
        ContainerGroups.prototype.createOrUpdate = function (resourceGroupName, containerGroupName, containerGroup, options) {
            return this.beginCreateOrUpdate(resourceGroupName, containerGroupName, containerGroup, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerGroups.prototype.update = function (resourceGroupName, containerGroupName, resource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                resource: resource,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Delete the specified container group in the specified subscription and resource group. The
         * operation does not delete other resources provided by the user, such as volumes.
         * @summary Delete the specified container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<Models.ContainerGroupsDeleteMethodResponse>
         */
        ContainerGroups.prototype.deleteMethod = function (resourceGroupName, containerGroupName, options) {
            return this.beginDeleteMethod(resourceGroupName, containerGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restarts all containers in a container group in place. If container image has updates, new image
         * will be downloaded.
         * @summary Restarts all containers in a container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ContainerGroups.prototype.restart = function (resourceGroupName, containerGroupName, options) {
            return this.beginRestart(resourceGroupName, containerGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerGroups.prototype.stop = function (resourceGroupName, containerGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                options: options
            }, stopOperationSpec, callback);
        };
        /**
         * Starts all containers in a container group. Compute resources will be allocated and billing will
         * start.
         * @summary Starts all containers in a container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ContainerGroups.prototype.start = function (resourceGroupName, containerGroupName, options) {
            return this.beginStart(resourceGroupName, containerGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerGroups.prototype.getOutboundNetworkDependenciesEndpoints = function (resourceGroupName, containerGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                options: options
            }, getOutboundNetworkDependenciesEndpointsOperationSpec, callback);
        };
        /**
         * Create or update container groups with specified configurations.
         * @summary Create or update container groups.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param containerGroup The properties of the container group to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerGroups.prototype.beginCreateOrUpdate = function (resourceGroupName, containerGroupName, containerGroup, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                containerGroup: containerGroup,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Delete the specified container group in the specified subscription and resource group. The
         * operation does not delete other resources provided by the user, such as volumes.
         * @summary Delete the specified container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerGroups.prototype.beginDeleteMethod = function (resourceGroupName, containerGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Restarts all containers in a container group in place. If container image has updates, new image
         * will be downloaded.
         * @summary Restarts all containers in a container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerGroups.prototype.beginRestart = function (resourceGroupName, containerGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                options: options
            }, beginRestartOperationSpec, options);
        };
        /**
         * Starts all containers in a container group. Compute resources will be allocated and billing will
         * start.
         * @summary Starts all containers in a container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerGroups.prototype.beginStart = function (resourceGroupName, containerGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                options: options
            }, beginStartOperationSpec, options);
        };
        ContainerGroups.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        ContainerGroups.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return ContainerGroups;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resource",
            mapper: __assign(__assign({}, Resource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var stopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOutboundNetworkDependenciesEndpointsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/outboundNetworkDependenciesEndpoints",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "containerGroup",
            mapper: __assign(__assign({}, ContainerGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            201: {
                bodyMapper: ContainerGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginRestartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/restart",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.ContainerInstance/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CachedImages: CachedImages,
        CachedImagesListResult: CachedImagesListResult,
        Capabilities: Capabilities,
        CapabilitiesCapabilities: CapabilitiesCapabilities,
        CapabilitiesListResult: CapabilitiesListResult,
        CloudError: CloudError,
        Usage: Usage,
        UsageListResult: UsageListResult,
        UsageName: UsageName
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Location. */
    var Location = /** @class */ (function () {
        /**
         * Create a Location.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function Location(client) {
            this.client = client;
        }
        Location.prototype.listUsage = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listUsageOperationSpec, callback);
        };
        Location.prototype.listCachedImages = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listCachedImagesOperationSpec, callback);
        };
        Location.prototype.listCapabilities = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listCapabilitiesOperationSpec, callback);
        };
        Location.prototype.listCachedImagesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listCachedImagesNextOperationSpec, callback);
        };
        Location.prototype.listCapabilitiesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listCapabilitiesNextOperationSpec, callback);
        };
        return Location;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listUsageOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/usages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listCachedImagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/cachedImages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CachedImagesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listCapabilitiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/capabilities",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapabilitiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listCachedImagesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CachedImagesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listCapabilitiesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapabilitiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ContainerAttachResponse: ContainerAttachResponse,
        ContainerExecRequest: ContainerExecRequest,
        ContainerExecRequestTerminalSize: ContainerExecRequestTerminalSize,
        ContainerExecResponse: ContainerExecResponse,
        Logs: Logs
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Containers. */
    var Containers = /** @class */ (function () {
        /**
         * Create a Containers.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function Containers(client) {
            this.client = client;
        }
        Containers.prototype.listLogs = function (resourceGroupName, containerGroupName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                containerName: containerName,
                options: options
            }, listLogsOperationSpec, callback);
        };
        Containers.prototype.executeCommand = function (resourceGroupName, containerGroupName, containerName, containerExecRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                containerName: containerName,
                containerExecRequest: containerExecRequest,
                options: options
            }, executeCommandOperationSpec, callback);
        };
        Containers.prototype.attach = function (resourceGroupName, containerGroupName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                containerGroupName: containerGroupName,
                containerName: containerName,
                options: options
            }, attachOperationSpec, callback);
        };
        return Containers;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listLogsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/logs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName,
            containerName
        ],
        queryParameters: [
            apiVersion,
            tail,
            timestamps
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Logs
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var executeCommandOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/exec",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName,
            containerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "containerExecRequest",
            mapper: __assign(__assign({}, ContainerExecRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerExecResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var attachOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/attach",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName,
            containerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerAttachResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-containerinstance";
    var packageVersion = "7.1.0";
    var ContainerInstanceManagementClientContext = /** @class */ (function (_super) {
        __extends(ContainerInstanceManagementClientContext, _super);
        /**
         * Initializes a new instance of the ContainerInstanceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerInstanceManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2021-09-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ContainerInstanceManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ContainerInstanceManagementClient = /** @class */ (function (_super) {
        __extends(ContainerInstanceManagementClient, _super);
        /**
         * Initializes a new instance of the ContainerInstanceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerInstanceManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.containerGroups = new ContainerGroups(_this);
            _this.operations = new Operations(_this);
            _this.location = new Location(_this);
            _this.containers = new Containers(_this);
            return _this;
        }
        return ContainerInstanceManagementClient;
    }(ContainerInstanceManagementClientContext));

    exports.ContainerGroups = ContainerGroups;
    exports.ContainerInstanceManagementClient = ContainerInstanceManagementClient;
    exports.ContainerInstanceManagementClientContext = ContainerInstanceManagementClientContext;
    exports.ContainerInstanceManagementMappers = mappers;
    exports.ContainerInstanceManagementModels = index;
    exports.Containers = Containers;
    exports.Location = Location;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-containerinstance.js.map
